//! PDF generator for sales reports
//!
//! This module contains the functionality for generating PDF reports using pdf-rs.

use crate::application::reporting_service::{SalesReport, ReportData, ReportSummary, DealData, TeamPerformanceData};
use std::io::Cursor;
use serde::{Deserialize, Serialize};

/// Error types for PDF generation
#[derive(Debug, thiserror::Error)]
pub enum PdfGenerationError {
    #[error("PDF creation error: {0}")]
    PdfError(String),
    #[error("IO error: {0}")]
    IoError(#[from] std::io::Error),
    #[error("Formatting error: {0}")]
    FormattingError(String),
}

/// PDF generator service
pub struct PdfGenerator;

impl PdfGenerator {
    pub fn new() -> Self {
        Self
    }

    /// Generate a PDF report from SalesReport data
    pub fn generate_sales_report_pdf(&self, report: &SalesReport) -> Result<Vec<u8>, PdfGenerationError> {
        // In a real implementation, we would use pdf-rs to generate the PDF
        // For now, we'll create a mock PDF content
        
        let mut pdf_content = String::new();
        
        // Add report header
        pdf_content.push_str(&format!("# Sales Report: {}\n\n", report.name));
        if let Some(description) = &report.description {
            pdf_content.push_str(&format!("**Description:** {}\n\n", description));
        }
        pdf_content.push_str(&format!("**Generated:** {}\n", report.generated_at.format("%Y-%m-%d %H:%M:%S").to_string()));
        pdf_content.push_str(&format!("**Generated by:** {}\n\n", report.generated_by));
        
        // Add summary section
        pdf_content.push_str("## Summary\n\n");
        pdf_content.push_str(&self.format_summary(&report.data.summary));
        pdf_content.push_str("\n\n");
        
        // Add deals section
        pdf_content.push_str("## Deals\n\n");
        pdf_content.push_str(&self.format_deals(&report.data.deals));
        pdf_content.push_str("\n\n");
        
        // Add team performance section
        pdf_content.push_str("## Team Performance\n\n");
        pdf_content.push_str(&self.format_team_performance(&report.data.team_performance));
        
        // Convert to PDF bytes (mock implementation)
        let pdf_bytes = self.text_to_pdf_bytes(&pdf_content)?;
        
        Ok(pdf_bytes)
    }

    /// Generate a PDF dashboard report
    pub fn generate_dashboard_pdf(&self, kpi_data: &[KpiData], activity_data: &[ActivityData]) -> Result<Vec<u8>, PdfGenerationError> {
        let mut pdf_content = String::new();
        
        // Add dashboard header
        pdf_content.push_str("# Sales Dashboard Report\n\n");
        pdf_content.push_str(&format!("**Generated:** {}\n\n", chrono::Utc::now().format("%Y-%m-%d %H:%M:%S").to_string()));
        
        // Add KPI section
        pdf_content.push_str("## Key Performance Indicators\n\n");
        pdf_content.push_str(&self.format_kpi_data(kpi_data));
        pdf_content.push_str("\n\n");
        
        // Add activity section
        pdf_content.push_str("## Recent Activity\n\n");
        pdf_content.push_str(&self.format_activity_data(activity_data));
        
        // Convert to PDF bytes (mock implementation)
        let pdf_bytes = self.text_to_pdf_bytes(&pdf_content)?;
        
        Ok(pdf_bytes)
    }

    fn format_summary(&self, summary: &ReportSummary) -> String {
        format!(
            "| Metric | Value |\n\
             |--------|-------|\n\
             | Total Deals | {} |\n\
             | Total Value | ${:.2} |\n\
             | Average Deal Size | ${:.2} |\n\
             | Win Rate | {:.1}% |\n\
             | Conversion Rate | {:.1}% |",
            summary.total_deals,
            summary.total_value as f64 / 100.0, // Convert cents to dollars
            summary.average_deal_size as f64 / 100.0, // Convert cents to dollars
            summary.win_rate * 100.0,
            summary.conversion_rate * 100.0
        )
    }

    fn format_deals(&self, deals: &[DealData]) -> String {
        let mut table = String::from("| Deal Name | Value | Status | Owner | Created |\n|-----------|-------|--------|-------|---------|\n");
        
        for deal in deals {
            table.push_str(&format!(
                "| {} | ${:.2} | {} | {} | {} |\n",
                deal.name,
                deal.value as f64 / 100.0, // Convert cents to dollars
                format_deal_status(&deal.status),
                deal.owner_id,
                deal.created_at.format("%Y-%m-%d").to_string()
            ));
        }
        
        table
    }

    fn format_team_performance(&self, team_data: &[TeamPerformanceData]) -> String {
        let mut table = String::from("| Team | Members | Deals | Value | Avg Deal Size | Win Rate |\n|------|---------|-------|-------|---------------|----------|\n");
        
        for team in team_data {
            table.push_str(&format!(
                "| {} | {} | {} | ${:.2} | ${:.2} | {:.1}% |\n",
                team.team_name,
                team.member_count,
                team.total_deals,
                team.total_value as f64 / 100.0, // Convert cents to dollars
                team.average_deal_size as f64 / 100.0, // Convert cents to dollars
                team.win_rate * 100.0
            ));
        }
        
        table
    }

    fn format_kpi_data(&self, kpi_data: &[KpiData]) -> String {
        let mut table = String::from("| KPI | Value | Trend |\n|-----|-------|-------|\n");
        
        for kpi in kpi_data {
            let trend_indicator = if kpi.trend > 0.0 { "↗" } else if kpi.trend < 0.0 { "↘" } else { "→" };
            table.push_str(&format!(
                "| {} | {:.2} {} | {} ({:+.1}%) |\n",
                kpi.name,
                kpi.value,
                kpi.unit,
                trend_indicator,
                kpi.trend
            ));
        }
        
        table
    }

    fn format_activity_data(&self, activity_data: &[ActivityData]) -> String {
        let mut table = String::from("| Time | Activity | User | Type |\n|------|----------|------|------|\n");
        
        for activity in activity_data {
            table.push_str(&format!(
                "| {} | {} | {} | {} |\n",
                activity.timestamp.format("%H:%M").to_string(),
                activity.description,
                activity.user_id,
                format_activity_type(&activity.activity_type)
            ));
        }
        
        table
    }

    /// Mock implementation of text to PDF conversion
    /// In a real implementation, this would use pdf-rs
    fn text_to_pdf_bytes(&self, text: &str) -> Result<Vec<u8>, PdfGenerationError> {
        // Create a simple PDF-like structure as a mock
        let mut pdf_content = String::new();
        pdf_content.push_str("%PDF-1.4\n");
        pdf_content.push_str("1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n");
        pdf_content.push_str("2 0 obj\n<<\n/Type /Pages\n/Kids [3 0 R]\n/Count 1\n>>\nendobj\n");
        pdf_content.push_str("3 0 obj\n<<\n/Type /Page\n/Parent 2 0 R\n/MediaBox [0 0 612 792]\n/Contents 4 0 R\n>>\nendobj\n");
        pdf_content.push_str("4 0 obj\n<<\n/Length 50\n>>\nstream\nBT\n/F1 12 Tf\n50 700 Td\n(");
        pdf_content.push_str(text);
        pdf_content.push_str(") Tj\nET\nendstream\nendobj\n");
        pdf_content.push_str("xref\n0 5\n0000000000 65535 f \n0000000010 00000 n \n0000000053 00000 n \n0000000108 00000 n \n0000000183 00000 n \ntrailer\n<<\n/Size 5\n/Root 1 0 R\n>>\nstartxref\n290\n%%EOF");
        
        Ok(pdf_content.into_bytes())
    }
}

/// Helper function to format deal status
fn format_deal_status(status: &crate::application::reporting_service::DealStatus) -> String {
    match status {
        crate::application::reporting_service::DealStatus::Prospecting => "Prospecting",
        crate::application::reporting_service::DealStatus::Qualified => "Qualified",
        crate::application::reporting_service::DealStatus::Proposal => "Proposal",
        crate::application::reporting_service::DealStatus::Negotiation => "Negotiation",
        crate::application::reporting_service::DealStatus::Won => "Won",
        crate::application::reporting_service::DealStatus::Lost => "Lost",
    }.to_string()
}

/// Helper function to format activity type
fn format_activity_type(activity_type: &crate::application::reporting_service::ActivityType) -> String {
    match activity_type {
        crate::application::reporting_service::ActivityType::DealWon => "Deal Won",
        crate::application::reporting_service::ActivityType::DealLost => "Deal Lost",
        crate::application::reporting_service::ActivityType::NewLead => "New Lead",
        crate::application::reporting_service::ActivityType::MeetingScheduled => "Meeting Scheduled",
        crate::application::reporting_service::ActivityType::ProposalSent => "Proposal Sent",
    }.to_string()
}

/// KPI data structure for PDF generation
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct KpiData {
    pub name: String,
    pub value: f64,
    pub trend: f32, // positive for upward trend, negative for downward
    pub unit: String,
}

/// Activity data structure for PDF generation
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct ActivityData {
    pub id: uuid::Uuid,
    pub description: String,
    pub timestamp: chrono::DateTime<chrono::Utc>,
    pub user_id: uuid::Uuid,
    pub activity_type: crate::application::reporting_service::ActivityType,
}

impl From<&crate::application::reporting_service::KpiData> for KpiData {
    fn from(kpi: &crate::application::reporting_service::KpiData) -> Self {
        Self {
            name: kpi.name.clone(),
            value: kpi.value,
            trend: kpi.trend,
            unit: kpi.unit.clone(),
        }
    }
}

impl From<&crate::application::reporting_service::ActivityData> for ActivityData {
    fn from(activity: &crate::application::reporting_service::ActivityData) -> Self {
        Self {
            id: activity.id,
            description: activity.description.clone(),
            timestamp: activity.timestamp,
            user_id: activity.user_id,
            activity_type: activity.activity_type.clone(),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::application::reporting_service::{ReportFilters, ReportData, ReportSummary, DealData, TeamPerformanceData, DealStatus};
    use uuid::Uuid;
    use chrono::Utc;

    #[test]
    fn test_generate_sales_report_pdf() {
        let generator = PdfGenerator::new();
        
        // Create mock report data
        let report = SalesReport {
            id: Uuid::new_v4(),
            name: "Test Report".to_string(),
            description: Some("Test report description".to_string()),
            filters: ReportFilters {
                date_range: None,
                user_ids: None,
                team_ids: None,
                status_filters: None,
                min_amount: None,
                max_amount: None,
            },
            data: ReportData {
                summary: ReportSummary {
                    total_deals: 10,
                    total_value: 500000, // $5,000
                    average_deal_size: 50000, // $500
                    win_rate: 0.7,
                    conversion_rate: 0.6,
                },
                deals: vec![
                    DealData {
                        id: Uuid::new_v4(),
                        name: "Big Deal".to_string(),
                        value: 100000, // $1,000
                        status: DealStatus::Won,
                        owner_id: Uuid::new_v4(),
                        created_at: Utc::now(),
                        closed_at: Some(Utc::now()),
                    }
                ],
                trends: vec![],
                team_performance: vec![],
            },
            generated_at: Utc::now(),
            generated_by: Uuid::new_v4(),
        };
        
        let result = generator.generate_sales_report_pdf(&report);
        assert!(result.is_ok());
        
        let pdf_bytes = result.unwrap();
        assert!(!pdf_bytes.is_empty());
    }
}