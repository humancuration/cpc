[package]
name = "video_editor"
version = "0.1.0"
edition = "2021"
publish = false

[lib]
name = "video_editor_core"
path = "src/lib.rs"

[[bin]]
name = "video_editor"
path = "src/main.rs"

# Desktop runner crate will live at apps/video_editor_desktop (separate package added to workspace)

[features]
# wasm bindings and web/tauri specifics are behind features to keep core testable
wasm = []
tauri = []
# enable sqlx offline to avoid needing a live DB at build time
sqlx-offline = ["sqlx/offline"]

[dependencies]
anyhow = { workspace = true }
thiserror = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true, features = ["fmt", "env-filter"] }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
uuid = { workspace = true, features = ["v4", "serde"] }

# Rendering / Engine
# Keep Bevy available for engine work; core stays headless. Desktop runner hosts preview.
bevy = { workspace = true, features = ["bevy_winit", "x11", "serialize"] }
# GPU backend for effect processing
wgpu = "0.19"

# UI
yew = { workspace = true, optional = true }
stylist = { workspace = true, features = ["yew"], optional = true }

# Audio
rodio = { workspace = true }

# Storage / DB
sqlx = { workspace = true, features = ["runtime-tokio-rustls", "postgres", "macros", "chrono"] }
chrono = { workspace = true, features = ["serde"] }

# Crypto (RustCrypto)
aes-gcm = { workspace = true }
sha2 = "0.10"
rand = { workspace = true }

# Caching / LRU
lru = "0.12"

# Spatial indexing for timeline clips
rstar = "0.12"

# Concurrency
rayon = "1.10"

# For memory-mapped files (large media handling)
memmap2 = "0.9"

# For plugin dynamic loading on desktop (placeholder, actual plugin API will be trait-based)
libloading = { version = "0.8", optional = true }

# GraphQL/gRPC placeholders for future integration (not used yet)
# async-graphql = "7"
# tonic = "0.12"

[dev-dependencies]
tokio = { workspace = true, features = ["macros", "rt-multi-thread"] }
pretty_assertions = "1.4"
criterion = { version = "0.5", features = ["html_reports"] }
# For stress and fuzz testing
arbitrary = { version = "1.3", features = ["derive"] }
libfuzzer-sys = { version = "0.4" }

[[bench]]
name = "timeline_bench"
harness = false

[[test]]
name = "stress_test"
path = "tests/stress_test.rs"

[[test]]
name = "fuzz_test"
path = "tests/fuzz_test.rs"
