syntax = "proto3";

package cpc.orchestrator;

import "google/protobuf/timestamp.proto";

// Node registry service
service NodeOrchestration {
  rpc RegisterNode(NodeInfo) returns (RegistrationResponse);
  rpc Heartbeat(NodePing) returns (HeartbeatResponse);
  rpc RequestResources(ResourceRequest) returns (ResourceAllocation);
}

// Identity service
service IdentityService {
  rpc Authenticate(AuthRequest) returns (AuthResponse);
  rpc RefreshToken(RefreshRequest) returns (AuthResponse);
  rpc ManageFriends(FriendRequest) returns (FriendResponse);
}

// Discovery service
service DiscoveryService {
  rpc PublishContent(ContentMetadata) returns (PublishResponse);
  rpc SearchContent(SearchQuery) returns (SearchResults);
}

// Message definitions
message NodeInfo {
  string id = 1;
  bytes public_key = 2;
  string endpoint = 3;
  map<string, string> resources = 4; // e.g. "cpu", "memory", "bandwidth"
}

message NodePing {
  string node_id = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message ResourceRequest {
  string node_id = 1;
  string resource_type = 2;
  int32 quantity = 3;
}

message ResourceAllocation {
  bool approved = 1;
  string allocation_id = 2;
  map<string, int32> allocated_resources = 3;
}

message AuthRequest {
  bytes public_key = 1;
  bytes signature = 2;
}

message AuthResponse {
  string jwt = 1;
  string refresh_token = 2;
  int64 expires_in = 3; // seconds
}

message RefreshRequest {
  string refresh_token = 1;
}

message FriendRequest {
  enum Action {
    ADD = 0;
    REMOVE = 1;
    BLOCK = 2;
  }
  string user_id = 1;
  string friend_id = 2;
  Action action = 3;
}

message FriendResponse {
  bool success = 1;
  repeated string friends = 2;
}

message ContentMetadata {
  string id = 1;
  string owner_id = 2;
  string title = 3;
  string description = 4;
  repeated string tags = 5;
}

message PublishResponse {
  bool success = 1;
  string content_id = 2;
}

message SearchQuery {
  string query = 1;
  repeated string tags = 2;
  int32 limit = 3;
}

message SearchResults {
  repeated ContentMetadata results = 1;
}

message RegistrationResponse {
  bool success = 1;
  string node_id = 2;
}

message HeartbeatResponse {
  bool acknowledged = 1;
}

// Secret management service
service SecretService {
  rpc RotateSecret(RotateSecretRequest) returns (RotateSecretResponse);
}

message RotateSecretRequest {
  string new_secret = 1;
  string admin_token = 2;
}

message RotateSecretResponse {
  bool success = 1;
  string message = 2;
}