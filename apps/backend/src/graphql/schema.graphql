scalar UUID

type ImpactReport {
  userId: ID!
  totalImpact: Float!
  breakdown: [ImpactBreakdown!]!
  distribution: [ImpactDistribution!]!
  timeline: [ImpactTimelinePoint!]!
  generatedAt: String!
}

type ImpactBreakdown {
  category: String!
  amount: Float!
  itemName: String!
  contribution: Float!
  impactScore: Float!
}

type ImpactDistribution {
  category: String!
  weight: Float!
}

type ImpactTimelinePoint {
  date: String!
  description: String!
  impactValue: Float!
  timestamp: Int!
  score: Float!
}

type OrganizationImpactReport {
  organizationId: UUID!
  year: Int!
  carbonFootprint: Float!
  communityInvestment: Float!
  diversityMetrics: DiversityMetrics!
  supplyChainScore: Float!
}

type DiversityMetrics {
  genderDiversity: Float!
  ethnicDiversity: Float!
}

type ProcessingStatus {
  jobId: ID!
  status: String!
  progress: Float!
  message: String
  estimatedCompletion: String
}

type Query {
  getImpactReport(userId: ID!): ImpactReport
  getProcessingStatus(jobId: ID!): ProcessingStatus
  getOrganizationImpactReport(orgId: UUID!, year: Int!): OrganizationImpactReport
  communities(first: Int!, after: String): CommunityConnection!
  community(id: ID!): Community
  getSupplyChainByProduct(productId: UUID!): SupplyChain
  listProductsWithSupplyChains: [ProductSummary!]
}

type Mutation {
  generateImpactReport(userId: ID!): ProcessingStatus
  createCommunity(name: String!, description: String!): Community!
  joinCommunity(id: ID!): JoinResult!
  leaveCommunity(id: ID!): JoinResult!
  updateSupplyChain(input: UpdateSupplyChainInput!): SupplyChain!
}

type Subscription {
  impactReportUpdated(userId: ID!): ImpactReport
}

type Community {
  id: ID!
  name: String!
  description: String!
  memberCount: Int!
  isMember: Boolean!
}

type SupplyChain {
    productId: UUID!
    stages: [ProductionStage!]!
    connections: [StageConnection!]!
    cooperativeImpact: CooperativeImpactSummary!
    timelineRange: TimelineRange!
}

type ProductionStage {
    id: UUID!
    name: String!
    description: String
    location: String!
    startDate: String!
    endDate: String!
}

type StageConnection {
    fromStageId: UUID!
    toStageId: UUID!
    relationshipType: String!
}

type CooperativeImpactSummary {
    workersBenefited: Int!
    coopsInvolved: Int!
    ethicalSourcingScore: Float!
}

type TimelineRange {
    start: String!
    end: String!
}

type ProductSummary {
    id: ID!
    name: String!
}

input UpdateSupplyChainInput {
  productId: UUID!
  stages: [ProductionStageInput!]!
  connections: [StageConnectionInput!]!
}

input ProductionStageInput {
    id: UUID!
    name: String!
    description: String
    location: String!
    startDate: String!
    endDate: String!
}

input StageConnectionInput {
    fromStageId: UUID!
    toStageId: UUID!
    relationshipType: String!
}

type CommunityEdge {
  cursor: String!
  node: Community!
}

type CommunityConnection {
  edges: [CommunityEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type JoinResult {
  community: Community!
  isMember: Boolean!
}