# GraphQL Schema for Android-Rust Migration
# This schema defines the core features ported from the legacy Android codebase

# ============================================================================
# USER MANAGEMENT SCHEMA
# ============================================================================

type User {
  id: ID!
  username: String!
  email: String!
  displayName: String
  bio: String
  avatarUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Complex fields
  profile: UserProfile
  followers: [User!]!
  following: [User!]!
  relationshipWith(userId: ID!): UserRelationshipType
}

type UserProfile {
  userId: ID!
  displayName: String!
  bio: String
  avatarUrl: String
  cooperativeScore: CooperativeScore!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CooperativeScore {
  value: Float!
  lastUpdated: DateTime!
  contributionFactors: [ContributionFactor!]!
}

type ContributionFactor {
  name: String!
  weight: Float!
  value: Float!
  description: String
}

enum UserRelationshipType {
  FOLLOWING
  BLOCKED
  MUTED
}

type UserRelationship {
  id: ID!
  userId: ID!
  relatedUserId: ID!
  relationshipType: UserRelationshipType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

input RegisterUserInput {
  username: String!
  email: String!
  password: String!
  displayName: String
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateProfileInput {
  displayName: String
  bio: String
  avatarUrl: String
}

input UpdateCooperativeScoreInput {
  factors: [ContributionFactorInput!]!
}

input ContributionFactorInput {
  name: String!
  weight: Float!
  value: Float!
  description: String
}

# ============================================================================
# SOCIAL INTERACTIONS SCHEMA
# ============================================================================

type Post {
  id: ID!
  authorId: ID!
  content: String!
  visibility: Visibility!
  cooperativeId: ID
  createdAt: DateTime!
  updatedAt: DateTime!
  likeCount: Int!
  shareCount: Int!
  commentCount: Int!
  isEdited: Boolean!
  
  # Complex fields
  author: User
  media: [MediaItem!]!
  comments(limit: Int, offset: Int): [Comment!]!
  likes(limit: Int, offset: Int): [Like!]!
  shares(limit: Int, offset: Int): [Share!]!
  isLikedByMe: Boolean!
  isSharedByMe: Boolean!
}

enum Visibility {
  PUBLIC
  COOPERATIVE
  FOLLOWERS
  PRIVATE
}

type MediaItem {
  id: ID!
  postId: ID!
  mediaType: MediaType!
  url: String!
  thumbnailUrl: String
  altText: String
  processingStatus: ProcessingStatus!
  fileSize: Int
  duration: Float
  createdAt: DateTime!
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

type Comment {
  id: ID!
  postId: ID!
  authorId: ID!
  content: String!
  parentCommentId: ID
  createdAt: DateTime!
  updatedAt: DateTime!
  likeCount: Int!
  replyCount: Int!
  isEdited: Boolean!
  
  # Complex fields
  author: User
  replies(limit: Int, offset: Int): [Comment!]!
  likes: [Like!]!
  isLikedByMe: Boolean!
}

type Like {
  id: ID!
  userId: ID!
  targetId: ID!
  targetType: LikeTargetType!
  createdAt: DateTime!
}

enum LikeTargetType {
  POST
  COMMENT
  REPLY
}

type Share {
  id: ID!
  userId: ID!
  postId: ID!
  shareType: ShareType!
  comment: String
  createdAt: DateTime!
}

enum ShareType {
  REPOST
  QUOTE
  EXTERNAL
}

type Feed {
  id: ID!
  userId: ID!
  feedType: FeedType!
  algorithm: FeedAlgorithm!
  settings: FeedSettings!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum FeedType {
  HOME
  FOLLOWING
  COOPERATIVE
  TRENDING
  LOCAL
}

enum FeedAlgorithm {
  CHRONOLOGICAL
  ALGORITHMIC
  COOPERATIVE
  TRENDING
}

type FeedSettings {
  showReposts: Boolean!
  showReplies: Boolean!
  contentFilters: [String!]!
  cooperativeWeight: Float!
  timeDecayFactor: Float!
}

type FeedItem {
  id: ID!
  feedId: ID!
  contentId: ID!
  contentType: FeedContentType!
  score: Float!
  createdAt: DateTime!
  post: Post
}

enum FeedContentType {
  POST
  REPOST
  COMMENT
  LIKE
}

type Notification {
  id: ID!
  userId: ID!
  notificationType: NotificationType!
  title: String!
  message: String!
  priority: NotificationPriority!
  isRead: Boolean!
  relatedId: ID
  createdAt: DateTime!
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  REPOST
  SYSTEM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

input CreatePostInput {
  content: String!
  visibility: Visibility!
  cooperativeId: ID
  mediaIds: [ID!]!
}

input UpdatePostInput {
  postId: ID!
  content: String!
}

input CreateCommentInput {
  postId: ID!
  content: String!
  parentCommentId: ID
}

input UpdateCommentInput {
  commentId: ID!
  content: String!
}

input FeedSettingsInput {
  showReposts: Boolean
  showReplies: Boolean
  contentFilters: [String!]
  cooperativeWeight: Float
  timeDecayFactor: Float
}

input FeedPaginationInput {
  limit: Int!
  offset: Int
  after: ID
  before: ID
}

# ============================================================================
# FORUM SYSTEM SCHEMA
# ============================================================================

type Community {
  id: ID!
  name: String!
  description: String!
  creatorId: ID!
  memberCount: Int!
  postCount: Int!
  isPrivate: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Complex fields
  creator: User
  forums: [Forum!]!
  rules: [CommunityRule!]!
  members(limit: Int, offset: Int): [CommunityMembership!]!
  moderators: [CommunityMembership!]!
  isMember: Boolean!
  isModerator: Boolean!
  recentThreads(limit: Int): [Thread!]!
}

type Forum {
  id: ID!
  communityId: ID!
  name: String!
  description: String!
  category: ForumCategory!
  threadCount: Int!
  postCount: Int!
  isLocked: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Complex fields
  community: Community
  threads(limit: Int, offset: Int, sortBy: ThreadSort): [Thread!]!
  pinnedThreads: [Thread!]!
  moderationSettings: ModerationSettings
}

enum ForumCategory {
  GENERAL
  DISCUSSION
  Q_AND_A
  ANNOUNCEMENTS
  SUPPORT
  FEEDBACK
  PROJECTS
  MARKETPLACE
}

enum ThreadSort {
  RECENT
  POPULAR
  MOST_REPLIES
  MOST_VOTES
  OLDEST
}

type Thread {
  id: ID!
  forumId: ID!
  authorId: ID!
  title: String!
  content: String!
  isPinned: Boolean!
  isLocked: Boolean!
  replyCount: Int!
  voteScore: Int!
  upvoteCount: Int!
  downvoteCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  lastActivity: DateTime!
  
  # Complex fields
  author: User
  forum: Forum
  replies(limit: Int, offset: Int, sortBy: ReplySort): [ThreadReply!]!
  votes: [Vote!]!
  myVote: Vote
  tags: [String!]!
}

enum ReplySort {
  CHRONOLOGICAL
  POPULAR
  MOST_VOTES
  NEWEST
  OLDEST
}

type ThreadReply {
  id: ID!
  threadId: ID!
  authorId: ID!
  content: String!
  parentReplyId: ID
  voteScore: Int!
  upvoteCount: Int!
  downvoteCount: Int!
  isEdited: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Complex fields
  author: User
  parentReply: ThreadReply
  childReplies: [ThreadReply!]!
  votes: [Vote!]!
  myVote: Vote
}

type Vote {
  id: ID!
  userId: ID!
  targetId: ID!
  targetType: VoteTargetType!
  voteType: VoteType!
  createdAt: DateTime!
}

enum VoteTargetType {
  THREAD
  REPLY
  POST
  COMMENT
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

type CommunityRule {
  id: ID!
  communityId: ID!
  title: String!
  description: String!
  ruleOrder: Int!
  isActive: Boolean!
  createdAt: DateTime!
}

type CommunityMembership {
  id: ID!
  communityId: ID!
  userId: ID!
  role: CommunityRole!
  joinedAt: DateTime!
  isActive: Boolean!
}

enum CommunityRole {
  MEMBER
  MODERATOR
  ADMIN
  OWNER
}

type ModerationSettings {
  id: ID!
  forumId: ID!
  requireApproval: Boolean!
  autoLockAfterDays: Int
  maxRepliesPerThread: Int
  allowAnonymousPosts: Boolean!
  contentFilters: [String!]!
}

type ModerationAction {
  id: ID!
  moderatorId: ID!
  targetId: ID!
  targetType: ModerationTargetType!
  actionType: ModerationActionType!
  reason: String!
  notes: String
  createdAt: DateTime!
  expiresAt: DateTime
}

enum ModerationTargetType {
  THREAD
  REPLY
  USER
  COMMUNITY
}

enum ModerationActionType {
  PIN
  UNPIN
  LOCK
  UNLOCK
  DELETE
  HIDE
  BAN
  UNBAN
  WARN
}

input CreateCommunityInput {
  name: String!
  description: String!
  isPrivate: Boolean
}

input UpdateCommunityInput {
  communityId: ID!
  name: String
  description: String
  isPrivate: Boolean
}

input CreateForumInput {
  communityId: ID!
  name: String!
  description: String!
  category: ForumCategory!
}

input CreateThreadInput {
  forumId: ID!
  title: String!
  content: String!
  tags: [String!]
}

input UpdateThreadInput {
  threadId: ID!
  title: String
  content: String
  tags: [String!]
}

input CreateThreadReplyInput {
  threadId: ID!
  content: String!
  parentReplyId: ID
}

input UpdateThreadReplyInput {
  replyId: ID!
  content: String!
}

input VoteInput {
  targetId: ID!
  targetType: VoteTargetType!
  voteType: VoteType!
}

input ModerationActionInput {
  targetId: ID!
  targetType: ModerationTargetType!
  actionType: ModerationActionType!
  reason: String!
  notes: String
  expiresAt: DateTime
}

# ============================================================================
# GOVERNANCE SYSTEM SCHEMA
# ============================================================================

type Proposal {
  id: ID!
  cooperativeId: ID!
  proposerId: ID!
  title: String!
  description: String!
  status: ProposalStatus!
  proposalType: ProposalType!
  options: [String!]!
  proposedChange: ProposedChange!
  createdAt: DateTime!
  votingDeadline: DateTime!
  updatedAt: DateTime!
  quorumThreshold: Float!
  participationCount: Int!
  eligibleVoterCount: Int!
  
  # Complex fields
  proposer: User
  votes(limit: Int, offset: Int): [Vote!]!
  myVote: Vote
  results: VotingResult
  hasQuorum: Boolean!
  isExpired: Boolean!
  participationRate: Float!
  timeRemaining: Int
}

enum ProposalStatus {
  DRAFT
  VOTING
  PASSED
  FAILED
  EXECUTED
  EXPIRED
}

enum ProposalType {
  FEATURE
  CONTENT
  POLICY
  BUG_FIX
  TECHNICAL
  COMMUNITY
}

type ProposedChange {
  changeType: String!
  targetSystem: String!
  changeDescription: String!
  implementationNotes: String
  rollbackPlan: String
  impactAssessment: String
}

type GovernanceVote {
  id: ID!
  proposalId: ID!
  voterId: ID!
  choices: [String!]!
  votingWeight: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  isAnonymous: Boolean!
  
  # Complex fields
  voter: User
  choiceRankings: [ChoiceRanking!]!
}

type ChoiceRanking {
  choice: String!
  rank: Int!
}

type VoteTally {
  id: ID!
  proposalId: ID!
  roundNumber: Int!
  roundResults: [RoundResult!]!
  eliminatedOptions: [String!]!
  totalVotes: Int!
  totalWeight: Float!
  calculatedAt: DateTime!
  isFinalRound: Boolean!
  winner: String
}

type RoundResult {
  option: String!
  voteCount: Int!
  weightedCount: Float!
  percentage: Float!
}

type VotingResult {
  id: ID!
  proposalId: ID!
  rounds: [VoteTally!]!
  winner: String
  totalParticipants: Int!
  quorumMet: Boolean!
  finalStatus: ProposalStatus!
  finalizedAt: DateTime!
}

type GovernanceParticipation {
  id: ID!
  userId: ID!
  cooperativeId: ID!
  proposalsCreated: Int!
  votesCast: Int!
  participationScore: Float!
  lastActivity: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Complex fields
  user: User
  participatedProposals: [Proposal!]!
  participationRate(totalProposals: Int!): Float!
  isActiveParticipant: Boolean!
  contributionFactor: ContributionFactor!
}

type GovernanceStats {
  totalProposals: Int!
  activeProposals: Int!
  totalParticipants: Int!
  averageParticipationRate: Float!
  proposalsByStatus: [StatusCount!]!
  proposalsByType: [TypeCount!]!
}

type StatusCount {
  status: ProposalStatus!
  count: Int!
}

type TypeCount {
  proposalType: ProposalType!
  count: Int!
}

input CreateProposalInput {
  cooperativeId: ID!
  title: String!
  description: String!
  proposalType: ProposalType!
  options: [String!]!
  proposedChange: ProposedChangeInput!
  votingDeadline: DateTime!
  quorumThreshold: Float!
}

input ProposedChangeInput {
  changeType: String!
  targetSystem: String!
  changeDescription: String!
  implementationNotes: String
  rollbackPlan: String
  impactAssessment: String
}

input UpdateProposalInput {
  proposalId: ID!
  title: String
  description: String
  options: [String!]
  proposedChange: ProposedChangeInput
  votingDeadline: DateTime
  quorumThreshold: Float
}

input CastVoteInput {
  proposalId: ID!
  choices: [String!]!
  isAnonymous: Boolean
}

input UpdateVoteInput {
  voteId: ID!
  choices: [String!]!
}

input ProposalFilterInput {
  status: ProposalStatus
  proposalType: ProposalType
  cooperativeId: ID
  proposerId: ID
  createdAfter: DateTime
  createdBefore: DateTime
  votingDeadlineAfter: DateTime
  votingDeadlineBefore: DateTime
}

# ============================================================================
# QUERY ROOT EXTENSIONS
# ============================================================================

extend type Query {
  # User Management
  me: User
  user(id: ID!): User
  userByUsername(username: String!): User
  searchUsers(query: String!, limit: Int, offset: Int): [User!]!
  userCooperativeScore(userId: ID!): CooperativeScore
  userRelationships(userId: ID!, relationshipType: UserRelationshipType): [UserRelationship!]!
  
  # Social Interactions
  post(id: ID!): Post
  postsByUser(userId: ID!, limit: Int, offset: Int): [Post!]!
  feed(feedType: FeedType!, pagination: FeedPaginationInput): [FeedItem!]!
  trendingPosts(timeRange: String, limit: Int): [Post!]!
  searchPosts(query: String!, limit: Int, offset: Int): [Post!]!
  notifications(limit: Int, offset: Int, unreadOnly: Boolean): [Notification!]!
  notificationCount(unreadOnly: Boolean): Int!
  feedSettings: FeedSettings
  
  # Forum System
  community(id: ID!): Community
  communities(limit: Int, offset: Int, search: String): [Community!]!
  forum(id: ID!): Forum
  thread(id: ID!): Thread
  searchThreads(query: String!, forumId: ID, communityId: ID, limit: Int, offset: Int): [Thread!]!
  trendingThreads(timeRange: String, communityId: ID, limit: Int): [Thread!]!
  myCommunities: [CommunityMembership!]!
  moderationActions(targetId: ID!, targetType: ModerationTargetType!): [ModerationAction!]!
  
  # Governance System
  proposal(id: ID!): Proposal
  proposals(filter: ProposalFilterInput, limit: Int, offset: Int): [Proposal!]!
  activeProposals(cooperativeId: ID, limit: Int): [Proposal!]!
  myProposals: [Proposal!]!
  votedProposals: [Proposal!]!
  governanceVote(id: ID!): GovernanceVote
  votingResults(proposalId: ID!): VotingResult
  governanceParticipation(userId: ID, cooperativeId: ID): GovernanceParticipation
  governanceStats(cooperativeId: ID!): GovernanceStats!
  canVote(proposalId: ID!): Boolean!
  canCreateProposal(cooperativeId: ID!): Boolean!
}

# ============================================================================
# MUTATION ROOT EXTENSIONS
# ============================================================================

extend type Mutation {
  # User Management
  register(input: RegisterUserInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  updateProfile(input: UpdateProfileInput!): UserProfile!
  updateCooperativeScore(userId: ID!, input: UpdateCooperativeScoreInput!): CooperativeScore!
  followUser(userId: ID!): UserRelationship!
  unfollowUser(userId: ID!): Boolean!
  blockUser(userId: ID!): UserRelationship!
  unblockUser(userId: ID!): Boolean!
  muteUser(userId: ID!): UserRelationship!
  unmuteUser(userId: ID!): Boolean!
  
  # Social Interactions
  createPost(input: CreatePostInput!): Post!
  updatePost(input: UpdatePostInput!): Post!
  deletePost(postId: ID!): Boolean!
  like(targetId: ID!, targetType: LikeTargetType!): Like!
  unlike(targetId: ID!, targetType: LikeTargetType!): Boolean!
  sharePost(postId: ID!, shareType: ShareType!, comment: String): Share!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  deleteComment(commentId: ID!): Boolean!
  updateFeedSettings(input: FeedSettingsInput!): FeedSettings!
  markNotificationRead(notificationId: ID!): Boolean!
  markAllNotificationsRead: Boolean!
  
  # Forum System
  createCommunity(input: CreateCommunityInput!): Community!
  updateCommunity(input: UpdateCommunityInput!): Community!
  joinCommunity(communityId: ID!): CommunityMembership!
  leaveCommunity(communityId: ID!): Boolean!
  createForum(input: CreateForumInput!): Forum!
  createThread(input: CreateThreadInput!): Thread!
  updateThread(input: UpdateThreadInput!): Thread!
  deleteThread(threadId: ID!): Boolean!
  createThreadReply(input: CreateThreadReplyInput!): ThreadReply!
  updateThreadReply(input: UpdateThreadReplyInput!): ThreadReply!
  deleteThreadReply(replyId: ID!): Boolean!
  vote(input: VoteInput!): Vote!
  removeVote(targetId: ID!, targetType: VoteTargetType!): Boolean!
  moderate(input: ModerationActionInput!): ModerationAction!
  
  # Governance System
  createProposal(input: CreateProposalInput!): Proposal!
  updateProposal(input: UpdateProposalInput!): Proposal!
  startVoting(proposalId: ID!): Proposal!
  deleteProposal(proposalId: ID!): Boolean!
  castVote(input: CastVoteInput!): GovernanceVote!
  updateVote(input: UpdateVoteInput!): GovernanceVote!
  removeVote(voteId: ID!): Boolean!
  finalizeVoting(proposalId: ID!): VotingResult!
  executeProposal(proposalId: ID!): Proposal!
}

# ============================================================================
# SUBSCRIPTION ROOT EXTENSIONS
# ============================================================================

extend type Subscription {
  # User Management
  userProfileUpdated(userId: ID!): UserProfile!
  cooperativeScoreUpdated(userId: ID!): CooperativeScore!
  relationshipUpdated(userId: ID!): UserRelationship!
  
  # Social Interactions
  feedUpdates(feedType: FeedType!): FeedItem!
  postUpdated(postId: ID!): Post!
  postComments(postId: ID!): Comment!
  postLikes(postId: ID!): Like!
  notifications: Notification!
  
  # Forum System
  forumThreads(forumId: ID!): Thread!
  threadReplies(threadId: ID!): ThreadReply!
  voteUpdates(targetId: ID!, targetType: VoteTargetType!): Vote!
  communityUpdates(communityId: ID!): Community!
  moderationActions(targetId: ID!): ModerationAction!
  
  # Governance System
  newProposals(cooperativeId: ID): Proposal!
  proposalUpdates(proposalId: ID!): Proposal!
  proposalVotes(proposalId: ID!): GovernanceVote!
  votingResultsUpdates(proposalId: ID!): VotingResult!
  participationUpdates(userId: ID!): GovernanceParticipation!
}

# ============================================================================
# SCALAR TYPES
# ============================================================================

scalar DateTime