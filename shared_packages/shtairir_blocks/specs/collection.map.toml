# Map a function over a collection
id = "stdlib.shtairir/collection.map@0.1.0"
namespace = "stdlib.shtairir"
name = "collection.map"
version = "0.1.0"
title = "Map"
description = "Applies a function to each element of a collection and returns a new collection with the results. Supports both Stream and non-Stream inputs."
authors = ["CPC Coop"]
license = "CPC"
tags = ["collection", "functional", "map"]
purity = "pure"
effects = []
determinism = "Deterministic"

[[generics]]
name = "T"
bounds = ["Serialize"]

[[generics]]
name = "U"
bounds = ["Serialize"]

# Inputs: collection and mapping function
inputs = [
  { name = "collection", ty = "list<T>" },
  { name = "function", ty = "Function" }
]

# No params for this block
params = []

# Output: new collection with mapped values
outputs = [
  { name = "result", ty = "list<U>" }
]

examples = [
  "result = collection.map(collection:[1,2,3], function:x -> x * 2)  # â†’ [2,4,6]"
]

[engine]
version_req = "^0.2"
capability_flags = ["serde", "pure_values"]

[integrity]
content_hash = "sha256:REPLACEME"