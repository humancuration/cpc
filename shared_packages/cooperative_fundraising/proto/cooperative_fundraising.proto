syntax = "proto3";
package cooperative_fundraising;

import "google/protobuf/timestamp.proto";

service CooperativeFundraisingService {
  // Campaign management
  // Creates a new fundraising campaign with strict validation.
  //
  // Errors:
  // - INVALID_ARGUMENT (400):
  //     * title must be 5-100 characters
  //     * description must be 20-1000 characters
  // - FAILED_PRECONDITION (412):
  //     * status must be DRAFT
  //     * For MEMBERSHIP campaigns: max_participants must be > 0
  //     * For DONATION campaigns: funding_goal must be positive and external_use_case required
  // - INTERNAL (500): Database operation failed
  rpc CreateCampaign(CreateCampaignRequest) returns (CreateCampaignResponse);
  rpc GetCampaign(GetCampaignRequest) returns (GetCampaignResponse);
  rpc ListCampaigns(ListCampaignsRequest) returns (ListCampaignsResponse);
  rpc UpdateCampaign(UpdateCampaignRequest) returns (UpdateCampaignResponse);
  rpc DeleteCampaign(DeleteCampaignRequest) returns (DeleteCampaignResponse);
  
  // Membership management
  rpc JoinCooperative(JoinCooperativeRequest) returns (JoinCooperativeResponse);
  rpc GetUserMembership(GetUserMembershipRequest) returns (GetUserMembershipResponse);
  
  // Contribution management
  rpc MakeMonetaryContribution(MakeMonetaryContributionRequest) returns (MakeMonetaryContributionResponse);
  rpc RecordVolunteerContribution(RecordVolunteerContributionRequest) returns (RecordVolunteerContributionResponse);
  rpc ListContributions(ListContributionsRequest) returns (ListContributionsResponse);
  
  // Campaign status management
  rpc ActivateCampaign(ActivateCampaignRequest) returns (ActivateCampaignResponse);
  rpc CompleteCampaign(CompleteCampaignRequest) returns (CompleteCampaignResponse);
}

// Campaign types
enum CampaignType {
  COOPERATIVE_MEMBERSHIP = 0;
  PURE_DONATION = 1;
  REG_CF = 2;
  REG_A = 3;
  REG_D = 4;
}

// Campaign status
enum CampaignStatus {
  DRAFT = 0;
  ACTIVE = 1;
  COMPLETED = 2;
  FAILED = 3;
  CANCELLED = 4;
}

// Verification status for volunteer contributions
enum VerificationStatus {
  PENDING = 0;
  VERIFIED = 1;
  DISPUTED = 2;
  REJECTED = 3;
}

// Core entities
message Campaign {
  string id = 1;
  CampaignType type = 2;
  string title = 3;
  string description = 4;
  google.protobuf.Timestamp created_at = 5;
  string owner_user_id = 6;
  CampaignStatus status = 7;
  
  // For membership campaigns
  optional MembershipRequirements membership_requirements = 8;
  
  // For donation campaigns
  optional DonationDetails donation_details = 9;
}

message MembershipRequirements {
  optional int32 max_participants = 1;
  repeated string required_actions = 2;
}

message DonationDetails {
  optional string funding_goal = 3;
  string external_use_case = 4;
  string currency = 5;
}

message Contribution {
  string id = 1;
  string campaign_id = 2;
  string user_id = 3;
  google.protobuf.Timestamp created_at = 4;
  
  oneof contribution_type {
    MonetaryContribution monetary = 5;
    VolunteerContribution volunteer = 6;
  }
}

message MonetaryContribution {
  string amount = 1;  // REQUIRED
  string currency = 2;  // REQUIRED
  string cpay_transaction_id = 3;
}

message VolunteerContribution {
  string opportunity_id = 1;
  int32 hours = 2;
  VerificationStatus verification_status = 3;
}

// Request/Response messages

// Campaign management
message CreateCampaignRequest {
  CampaignType type = 1;
  string title = 2;
  string description = 3;
  string owner_user_id = 4;
  
  // For membership campaigns
  optional MembershipRequirements membership_requirements = 5;
  
  // For donation campaigns
  optional DonationDetails donation_details = 6;
}

message CreateCampaignResponse {
  Campaign campaign = 1;
}

message GetCampaignRequest {
  string campaign_id = 1;
}

message GetCampaignResponse {
  Campaign campaign = 1;
}

message ListCampaignsRequest {
  optional CampaignType type = 1;
  optional CampaignStatus status = 2;
  optional int32 limit = 3;
  optional int32 offset = 4;
}

message ListCampaignsResponse {
  repeated Campaign campaigns = 1;
  int32 total_count = 2;
}

message UpdateCampaignRequest {
  string campaign_id = 1;
  optional string title = 2;
  optional string description = 3;
  optional MembershipRequirements membership_requirements = 4;
  optional DonationDetails donation_details = 5;
}

message UpdateCampaignResponse {
  Campaign campaign = 1;
}

message DeleteCampaignRequest {
  string campaign_id = 1;
}

message DeleteCampaignResponse {
  bool success = 1;
}

// Membership management
message JoinCooperativeRequest {
  string user_id = 1;
  string campaign_id = 2;
}

message JoinCooperativeResponse {
  bool success = 1;
  string message = 2;
}

message GetUserMembershipRequest {
  string user_id = 1;
}

message GetUserMembershipResponse {
  bool has_membership = 1;
  optional string campaign_id = 2;
}

// Contribution management
message MakeMonetaryContributionRequest {
  string user_id = 1;
  string campaign_id = 2;
  string amount = 3;
  string currency = 4;
  string cpay_transaction_id = 5;
}

message MakeMonetaryContributionResponse {
  Contribution contribution = 1;
}

message RecordVolunteerContributionRequest {
  string user_id = 1;
  string campaign_id = 2;
  string opportunity_id = 3;
  int32 hours = 4;
}

message RecordVolunteerContributionResponse {
  Contribution contribution = 1;
}

message ListContributionsRequest {
  string campaign_id = 1;
  optional string user_id = 2;
  optional int32 limit = 3;
  optional int32 offset = 4;
}

message ListContributionsResponse {
  repeated Contribution contributions = 1;
  int32 total_count = 2;
}

// Campaign status management
message ActivateCampaignRequest {
  string campaign_id = 1;
}

message ActivateCampaignResponse {
  Campaign campaign = 1;
}

message CompleteCampaignRequest {
  string campaign_id = 1;
}

message CompleteCampaignResponse {
  Campaign campaign = 1;
}