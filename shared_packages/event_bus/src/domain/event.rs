//! Event types and metadata
//! 
//! This module defines the core event structure used throughout the system.

use serde::{Deserialize, Serialize};
use uuid::Uuid;
use chrono::{DateTime, Utc};
use std::fmt;

/// Source of an event
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum EventSource {
    /// Event originated locally
    Local,
    /// Event originated from a remote source
    Remote,
    /// Event was generated by the system
    System,
}

/// Standardized event structure
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DomainEvent {
    /// Unique identifier for the event
    pub event_id: Uuid,
    
    /// Domain that the event belongs to (e.g., "health", "finance")
    pub domain: String,
    
    /// Type of event (e.g., "mood_updated", "transaction_created")
    pub event_type: String,
    
    /// Event payload
    pub payload: serde_json::Value,
    
    /// Timestamp when the event occurred
    pub timestamp: DateTime<Utc>,
    
    /// Source of the event
    pub source: EventSource,
}

impl DomainEvent {
    /// Create a new domain event
    pub fn new(
        domain: String,
        event_type: String,
        payload: serde_json::Value,
        source: EventSource,
    ) -> Self {
        Self {
            event_id: Uuid::new_v4(),
            domain,
            event_type,
            payload,
            timestamp: Utc::now(),
            source,
        }
    }
    
    /// Create a new local domain event
    pub fn new_local(
        domain: String,
        event_type: String,
        payload: serde_json::Value,
    ) -> Self {
        Self::new(domain, event_type, payload, EventSource::Local)
    }
    
    /// Create a new system domain event
    pub fn new_system(
        domain: String,
        event_type: String,
        payload: serde_json::Value,
    ) -> Self {
        Self::new(domain, event_type, payload, EventSource::System)
    }
}

impl fmt::Display for DomainEvent {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "DomainEvent({}, {}, {})",
            self.domain, self.event_type, self.event_id
        )
    }
}